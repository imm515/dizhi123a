name: 1 Update Node Links with Runtime Report and Push to Target Repository

on:
  schedule:
    - cron: '35 */1 * * *'  # 每1小时自动运行一次
  workflow_dispatch:        # 支持手动触发

jobs:
  update-nodes:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 使用北京时间

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Record Start Time
      id: start_time
      run: |
        echo "START_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "::debug::Start Time Recorded: ${{ env.START_TIME }}"

    - name: Fetch and Clean Webpage Content
      run: |
        VMESS_URL="${{ secrets.VMESS_URL }}"
        SS_URL="${{ secrets.SS_URL }}"
        
        echo "::debug::Fetching VMESS content from: $VMESS_URL" >&2
        curl -s "$VMESS_URL" | sed 's/<[^>]*>//g' > webpage_content.txt
        
        echo "::debug::Fetching SS content from: $SS_URL" >&2
        curl -s "$SS_URL" | sed 's/<[^>]*>//g' > ss_webpage_content.txt

    - name: Fetch and Update Nodes from Content Files
      run: |
        VMESS_NODES=$(grep -oP '.*vmess://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        VLESS_NODES=$(grep -oP '.*vless://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        SS_NODES=$(grep -oP '.*(ss://|ssr://)\S+' ss_webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        
        echo "$VMESS_NODES" > dizhi1.txt
        echo "$VLESS_NODES" > dizhi2.txt
        echo "$SS_NODES" > dizhi3.txt

    - name: Checkout target repository
      uses: actions/checkout@v3
      with:
        repository: ${{ secrets.TARGET_REPO }}
        token: ${{ secrets.TARGET_PAT }}
        path: target-repo
        fetch-depth: 0

    - name: Retrieve existing timestamp
      run: |
        if [ -f "target-repo/${{ secrets.TARGET_FOLDER }}/timestamp.txt" ]; then
          cp "target-repo/${{ secrets.TARGET_FOLDER }}/timestamp.txt" ./ || true
          echo "::debug::Copied existing timestamp file"
        else
          echo "::debug::No existing timestamp file found"
        fi

    - name: Update timestamp file
      run: |
        CURRENT_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        declare -A timestamps
        
        # 读取现有时间戳
        if [ -f "timestamp.txt" ]; then
          while IFS=: read -r key value; do
            timestamps["$key"]="$value"
          done < timestamp.txt
        fi

        # 检查文件是否有变化
        check_diff() {
          local file="$1"
          local target_file="target-repo/${{ secrets.TARGET_FOLDER }}/$file"
          if [ -f "$target_file" ] && ! diff -q "$file" "$target_file" >/dev/null; then
            return 0
          else
            return 1
          fi
        }

        # 更新需要变更的时间戳
        for i in 1 2 3; do
          file="dizhi${i}.txt"
          if check_diff "$file"; then
            timestamps["$file"]="$CURRENT_TIME"
            echo "::debug::Updated timestamp for $file"
          elif [ -z "${timestamps[$file]}" ]; then
            timestamps["$file"]="$CURRENT_TIME"
            echo "::debug::Initialized timestamp for $file"
          fi
        done

        # 生成新的时间戳文件
        printf "dizhi1.txt:%s\ndizhi2.txt:%s\ndizhi3.txt:%s\n" \
          "${timestamps[dizhi1.txt]}" \
          "${timestamps[dizhi2.txt]}" \
          "${timestamps[dizhi3.txt]}" > timestamp.txt

    - name: Copy files to target repository
      run: |
        cp -v dizhi*.txt ss_webpage_content.txt webpage_content.txt timestamp.txt "target-repo/${{ secrets.TARGET_FOLDER }}/"

    - name: Record End Time and Calculate Duration
      id: end_time
      run: |
        END_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        START_SEC=$(date -d "${{ env.START_TIME }}" +%s)
        END_SEC=$(date -d "$END_TIME" +%s)
        DURATION=$((END_SEC - START_SEC))
        FORMATTED_DURATION=$(printf "%02d:%02d:%02d" $((DURATION/3600)) $((DURATION%3600/60)) $((DURATION%60)))
        echo "END_TIME=$END_TIME" >> $GITHUB_ENV
        echo "DURATION=$FORMATTED_DURATION" >> $GITHUB_ENV

    - name: Append Report Link to dizhiR.txt
      run: |
        # 读取时间戳文件
        declare -A timestamp_dates
        while IFS=: read -r key value; do
          timestamp_dates["$key"]="$value"
        done < "target-repo/${{ secrets.TARGET_FOLDER }}/timestamp.txt"

        # 计算时间差
        CURRENT_SEC=$(date +%s)
        get_days_diff() {
          local file_date="$1"
          local file_sec=$(date -d "$file_date" +%s)
          echo "scale=2; ($CURRENT_SEC - $file_sec)/86400" | bc -l | xargs printf "%.2f"
        }

        D1_DAYS=$(get_days_diff "${timestamp_dates[dizhi1.txt]}")
        D2_DAYS=$(get_days_diff "${timestamp_dates[dizhi2.txt]}")
        D3_DAYS=$(get_days_diff "${timestamp_dates[dizhi3.txt]}")

        # 生成报告链接
        echo "trojan://CMLiussss@127.0.0.1:8888?security=tls&allowInsecure=1&type=tcp&headerType=none#%23报告A ${{ env.START_TIME }} 耗时: ${{ env.DURATION }}" > target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt
        echo "trojan://CMLiussss@127.0.0.1:8888?security=tls&allowInsecure=1&type=tcp&headerType=none#UTD vm:${D1_DAYS} vl:${D2_DAYS} ss:${D3_DAYS}" >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt

    - name: Generate dizhi123.txt
      run: |
        {
          cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi1.txt
          echo -e "\n"
          cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi2.txt
          echo -e "\n"
          cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi3.txt
          echo -e "\n"
          cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt
        } > target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt

    - name: Commit and Push changes
      run: |
        cd target-repo
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "github-actions-bot@users.noreply.github.com"
        
        git add .
        COMMIT_MESSAGE="Auto-update at ${{ env.END_TIME }}"
        if git commit -m "$COMMIT_MESSAGE"; then
          git push origin main
        else
          echo "::debug::No changes to commit"
        fi
