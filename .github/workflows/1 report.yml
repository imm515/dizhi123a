name: 1 Update Node Links with Runtime Report and Push to Target Repository

on:
  schedule:
    - cron: '35 */6 * * *'  # 每6小时自动运行一次
  workflow_dispatch:  # 支持手动触发

jobs:
  update-nodes:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 使用北京时间

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Record Start Time
      id: start_time
      run: |
        echo "START_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Fetch and Clean Webpage Content
      run: |
        # 通过 secrets 获取网页地址
        VMESS_URL="${{ secrets.VMESS_URL }}"
        SS_URL="${{ secrets.SS_URL }}"
        
        # 获取网页内容并去除 HTML 标签
        curl -s "$VMESS_URL" | sed 's/<[^>]*>//g' > webpage_content.txt
        curl -s "$SS_URL" | sed 's/<[^>]*>//g' > ss_webpage_content.txt
        echo "Webpage content cleaned and saved."

    - name: Fetch and Update Nodes from Content Files
      run: |
        # 提取各类型节点，并去除首尾空白字符、替换转义字符，并排序去重
        VMESS_NODES=$(grep -oP '.*vmess://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        VLESS_NODES=$(grep -oP '.*vless://\S+' webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        
        # 提取 ss:// 和 ssr:// 节点，并合并到 SS_NODES
        SS_NODES=$(grep -oP '.*(ss://|ssr://)\S+' ss_webpage_content.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/&amp;/\&/g' | sort -u)
        
        # 将提取的节点数据保存到各自文件中
        echo "$VMESS_NODES" > dizhi1.txt
        echo "$VLESS_NODES" > dizhi2.txt
        echo "$SS_NODES" > dizhi3.txt
        echo "Node data saved to files."

    - name: Checkout target repository
      uses: actions/checkout@v3
      with:
        repository: ${{ secrets.TARGET_REPO }}  # 目标仓库名称由 Secrets 提供
        token: ${{ secrets.TARGET_PAT }}         # 使用 Secrets 中的 PAT
        path: target-repo

    - name: Copy files to target repository
      run: |
        cp dizhi1.txt dizhi2.txt dizhi3.txt ss_webpage_content.txt webpage_content.txt target-repo/${{ secrets.TARGET_FOLDER }}/
        echo "Files copied to target repository's folder."

    - name: Record End Time and Calculate Duration
      id: end_time
      run: |
        END_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        START_TIME_SECONDS=$(date -d "${{ env.START_TIME }}" +'%s')
        END_TIME_SECONDS=$(date -d "$END_TIME" +'%s')
        DURATION=$((END_TIME_SECONDS - START_TIME_SECONDS))
        HOURS=$((DURATION / 3600))
        MINUTES=$(( (DURATION % 3600) / 60 ))
        SECONDS=$((DURATION % 60))
        printf -v FORMATTED_DURATION "%02d:%02d:%02d" $HOURS $MINUTES $SECONDS
        echo "END_TIME=$END_TIME" >> $GITHUB_ENV
        echo "DURATION=$FORMATTED_DURATION" >> $GITHUB_ENV

    - name: Append Report Link to dizhiR.txt
      run: |
        sudo apt-get update
        sudo apt-get install -y bc
    
        # 使用UTC时间避免时区问题
        CURRENT_TIME_UTC=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        CURRENT_TIME_SECONDS=$(date -ud "$CURRENT_TIME_UTC" +%s)
    
        check_file_changed() {
          local file="$1"
          local target_file="target-repo/${{ secrets.TARGET_FOLDER }}/$file"
          
          # 添加调试输出
          echo "Checking changes for: $target_file"
          if [[ -f "$target_file" ]]; then
            if ! diff -q "$file" "$target_file" > /dev/null; then
              echo "true"
            else
              echo "false"
            fi
          else
            echo "true"
          fi
        }
    
        get_last_update_days() {
          local file="$1"
          local target_path="${{ secrets.TARGET_FOLDER }}/$file"
          
          # 获取精确到文件的最后一次提交时间（ISO UTC格式）
          echo "Checking commit time for: $target_path"
          LAST_COMMIT_UTC=$(git -C target-repo log -1 --pretty=format:%aI -- "$target_path" 2>/dev/null)
          echo "Last commit UTC for $file: $LAST_COMMIT_UTC"
          
          if [[ -n "$LAST_COMMIT_UTC" ]]; then
            # 转换为Unix时间戳（UTC基准）
            LAST_UPDATED_SECONDS=$(date -ud "$LAST_COMMIT_UTC" +%s 2>/dev/null)
            echo "Last updated seconds: $LAST_UPDATED_SECONDS"
            
            if [[ -n "$LAST_UPDATED_SECONDS" ]]; then
              # 计算精确时间差（秒）
              DIFF_SECONDS=$((CURRENT_TIME_SECONDS - LAST_UPDATED_SECONDS))
              echo "Diff seconds: $DIFF_SECONDS"
              
              # 计算小数天数并格式化
              DAYS=$(echo "scale=1; $DIFF_SECONDS/86400" | bc -l | awk '{printf "%.1f", $0}')
              echo "Calculated days: $DAYS"
              echo "$DAYS"
            else
              echo "0.0"
            fi
          else
            echo "∞"
          fi
        }
    
        # 检查文件变更
        DIZHI1_CHANGED=$(check_file_changed "dizhi1.txt")
        DIZHI2_CHANGED=$(check_file_changed "dizhi2.txt")
        DIZHI3_CHANGED=$(check_file_changed "dizhi3.txt")
        echo "Change Status - vm: $DIZHI1_CHANGED, vl: $DIZHI2_CHANGED, ss: $DIZHI3_CHANGED"
    
        # 构建报告信息
        REPORT_INFO="%23报告 ${{ env.START_TIME }}"
    
        if [[ "$DIZHI1_CHANGED" == "false" && "$DIZHI2_CHANGED" == "false" && "$DIZHI3_CHANGED" == "false" ]]; then
          DIZHI1_DAYS=$(get_last_update_days "dizhi1.txt")
          DIZHI2_DAYS=$(get_last_update_days "dizhi2.txt")
          DIZHI3_DAYS=$(get_last_update_days "dizhi3.txt")
          
          REPORT_INFO+=" UTD：vm:${DIZHI1_DAYS}d vl:${DIZHI2_DAYS}d ss:${DIZHI3_DAYS}d"
        else
          UPDATED_FILES=()
          [[ "$DIZHI1_CHANGED" == "true" ]] && UPDATED_FILES+=("vm")
          [[ "$DIZHI2_CHANGED" == "true" ]] && UPDATED_FILES+=("vl")
          [[ "$DIZHI3_CHANGED" == "true" ]] && UPDATED_FILES+=("ss")
          REPORT_INFO+=" 更新：${UPDATED_FILES[*]}"
        fi
    
        # 生成报告链接
        REPORT_LINK_1="trojan://CMLiussss@127.0.0.1:8888?security=tls&allowInsecure=1&type=tcp&headerType=none#%23报告A ${{ env.START_TIME }} 耗时: ${{ env.DURATION }}"
        REPORT_LINK_2="trojan://CMLiussss@127.0.0.1:8888?security=tls&allowInsecure=1&type=tcp&headerType=none#${REPORT_INFO}"
    
        echo "$REPORT_LINK_1" > "target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt"
        echo "$REPORT_LINK_2" >> "target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt"

    - name: Generate dizhi123.txt
      run: |
        # 拼接 dizhi1.txt、dizhi2.txt、dizhi3.txt 和 dizhiR.txt 的内容，并在每个文件内容之间添加一个空行
        cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi1.txt > target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        echo "" >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi2.txt >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        echo "" >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhi3.txt >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        echo "" >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        cat target-repo/${{ secrets.TARGET_FOLDER }}/dizhiR.txt >> target-repo/${{ secrets.TARGET_FOLDER }}/dizhi123.txt
        echo "dizhi123.txt generated with content from dizhi1.txt, dizhi2.txt, dizhi3.txt, and dizhiR.txt."

    - name: Commit and Push changes to target repository
      run: |
        cd target-repo
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        git commit -m "Update nodes data with runtime report and dizhi123.txt"
        git push origin main
